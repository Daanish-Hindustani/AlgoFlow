import uuid
from flask import Blueprint, render_template, request, redirect, url_for, jsonify
from jinja2 import TemplateNotFound
from apps.charts.db import data

charts_blueprint = Blueprint(
    'charts_blueprint',
    __name__,
    url_prefix='/chart'
)

@charts_blueprint.route('/')
def main():
    if(data[0]['id']):
         return redirect(url_for('charts_blueprint.chart', chart_id=data[0]['id']))
    return redirect(url_for('charts_blueprint.default_chart'))
       

@charts_blueprint.route('/<string:"chart_id">/')
def chart(chart_id):
     return render_template('charts/chart.html')



# Default route to show the first chart or create a new one if none exists
@charts_blueprint.route('/default/', methods=['GET', 'POST'])
def default_chart():
    try:
        if data:
            # If there are charts in the database, redirect to the first one
            first_chart_name = data[0]['name']
            return redirect(url_for('charts_blueprint.chart', chart_name=first_chart_name))
        else:
            new_chart = {
                'chart_id': str(uuid.uuid4()),
                'name': str(uuid.uuid4()),
                'ticker': "AMZN",
                'interval': "1d",
                'chart_type': "bar",
                'indicators': ["sma"]
            }
            data.append(new_chart)
            return redirect(url_for('charts_blueprint.chart', chart_name=new_chart["name"]))
    except Exception as e:
        return str(e), 404


# Route to show a specific chart based on chart_name
@charts_blueprint.route('/<string:chart_name>/', methods=['GET'])
def chart(chart_name):
    try:
        # Find the chart data by name
        chart_data = next((chart for chart in data if chart['name'] == chart_name), None)
        if chart_data is None:
            return "Chart not found", 404
        return jsonify(chart_data)
    except Exception as e:
        return str(e), 404


# Route to create a new chart with default values
@charts_blueprint.route('/create', methods=['POST'])
def create_chart():
    try:
        new_chart = {
            'name': str(uuid.uuid4()),
            'ticker': "AMZN",
            'interval': "1day",
            'chart_type': "bar",
            'indicators': []
        }
        data.append(new_chart)
        return redirect(url_for('charts_blueprint.chart', chart_name=new_chart["name"]))
    except TemplateNotFound:
        return "Template not found, please input correct chart", 404



@charts_blueprint.route('/update', methods=['POST'])
def update_chart():
    try:
        data_json = request.get_json()
        chart_name = data_json.get('name')
        field = data_json.get('field')
        value = data_json.get('value')

        # Find the chart and update the specified field
        chart_data = next((chart for chart in data if chart['name'] == chart_name), None)
        if chart_data is None:
            return jsonify({"error": "Chart not found"}), 404

        chart_data[field] = value

        return jsonify({"success": True, "chart_data": chart_data})
    except Exception as e:
        return jsonify({"error": str(e)}), 400



# Route to delete a chart
@charts_blueprint.route('/delete', methods=['POST'])
def delete_chart():
    try:
        data_json = request.get_json()
        chart_name = data_json.get('name')
        # Find the chart and remove it from the data list
        global data
        data = [chart for chart in data if chart['name'] != chart_name]
    #retrun response
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"error": str(e)}), 400




